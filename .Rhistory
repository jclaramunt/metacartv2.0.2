q.right <- sum(gs^2/vis*IRight(cpt, xs)) -
(sum(gs/vis*IRight(cpt, xs)))^2/sum(IRight(cpt, xs)/vis)
C.left <- sum(ILeft(cpt, xs)/vis^2)/sum(ILeft(cpt, xs)/vis)
C.right <- sum(IRight(cpt, xs)/vis^2)/sum(IRight(cpt, xs)/vis)
(q.left + q.right + QC.unsplit[1] - df)/(sum(1/vi) - C.left - C.right - QC.unsplit[2])
}
compute_re_Qb <- function(g, vi, xk, nodes, pleaf, cpt){
inx.unsplit <- nodes!= pleaf
inx.split <- nodes == pleaf
xs <- xk[inx.split]
gs <- g[inx.split]
vis <- vi[inx.split]
tau2 <- compute_tau2_SSS(g, vi, x, nodes, pleaf, cpt,
inx.unsplit, xs, gs, vis)
wts <- 1/(vi + tau2)
wtss <- wts[inx.split]
Qstar.unsplit <- compute_left_(g[inx.unsplit], 1/wts[inx.unsplit],
nodes[inx.unsplit], unique(nodes[inx.unsplit]))[1]
Qstar.left <- sum(gs^2*wtss*ILeft(cpt, xs)) -
(sum(gs*wtss*ILeft(cpt, xs)))^2/sum(ILeft(cpt, xs)*wtss)
Qstar.right <- sum(gs^2*wtss*IRight(cpt, xs)) -
(sum(gs*wtss*IRight(cpt, xs)))^2/sum(IRight(cpt, xs)*wtss)
Q.between <- sum(g^2*wts) - (sum(g*wts))^2/sum(wts) - Qstar.left - Qstar.right -Qstar.unsplit
Q.between
}
x <- rnorm(40)
vi <- runif(40, 0.01, 0.04)
g <- x + rnorm(40,0, 0.01)
nodes <- sample(2:3,40,  replace = T)
pleaf <- 2
cpt <- 0
compute_re_Qb(g, vi, x, nodes, pleaf, cpt)
rebetQ<- function(yi, vi, mods){
wts = 1/vi
wy = wts*yi
wy2 = wts * yi^2
Q <- tapply(wy2, mods, sum) - tapply(wy, mods, function(x) (sum(x))^2)/tapply(wts, mods, sum)
df <- tapply(wy, mods, length)-1
C <- tapply(wts, mods, sum) - tapply(wts, mods, function(x) sum(x^2))/ tapply(wts, mods, sum)
tau2 <- (sum(Q) - sum(df))/sum(C)
tau2 <- max(0, tau2)
wstar = 1/(vi+tau2)
wystar = wstar*yi
wy2star = wstar*yi^2
Qstar <- tapply(wy2star, mods, sum) - tapply(wystar, mods, function(x) (sum(x))^2)/tapply(wstar, mods, sum)
Qstar.total <- sum(wy2star) - (sum(wystar))^2/sum(wstar)
Qbet <- Qstar.total - sum(Qstar)
if (is.na(Qbet)) {
Qbet <- Inf
}
return(c(Qbet, tau2))
}
nodes.new <- nodes
nodes.new[nodes == pleaf] <- ifelse(x[nodes == pleaf] < cpt, 4, 5 )
rebetQ(g, vi, nodes.new)
compute_re_Qb <- function(g, vi, xk, nodes, pleaf, cpt){
inx.unsplit <- nodes!= pleaf
inx.split <- nodes == pleaf
xs <- xk[inx.split]
gs <- g[inx.split]
vis <- vi[inx.split]
tau2 <- compute_tau2_SSS(g, vi, x, nodes, pleaf, cpt,
inx.unsplit, xs, gs, vis)
wts <- 1/(vi + tau2)
wtss <- wts[inx.split]
Qstar.unsplit <- compute_left_(g[inx.unsplit], 1/wts[inx.unsplit],
nodes[inx.unsplit], unique(nodes[inx.unsplit]))[1]
Qstar.left <- sum(gs^2*wtss*ILeft(cpt, xs)) -
(sum(gs*wtss*ILeft(cpt, xs)))^2/sum(ILeft(cpt, xs)*wtss)
Qstar.right <- sum(gs^2*wtss*IRight(cpt, xs)) -
(sum(gs*wtss*IRight(cpt, xs)))^2/sum(IRight(cpt, xs)*wtss)
Q.between <- sum(g^2*wts) - (sum(g*wts))^2/sum(wts) - Qstar.left - Qstar.right -Qstar.unsplit
c(Q.between,tau2)
}
compute_re_Qb(g, vi, x, nodes, pleaf, cpt)
rebetQ(g, vi, nodes.new)
x <- rnorm(80)
vi <- runif(80, 0.01, 0.04)
g <- x + rnorm(80,0, 0.01)
nodes <- sample(2:4,80,  replace = T)
pleaf <- 3
cpt <- 0
compute_re_Qb(g, vi, x, nodes, pleaf, cpt)
nodes.new <- nodes
nodes.new[nodes == pleaf] <- ifelse(x[nodes == pleaf] < cpt, 5, 6 )
rebetQ(g, vi, nodes.new)
library(Rcpp)
sourceCpp("compute_left_.cpp")
expit <- function(x) (tanh(x/2)+1)/2
ILeft <- function(cpt, xk, a) {
1-expit(a*(xk-cpt))
}
IRight <- function(cpt, xk, a) {
expit(a*(xk-cpt))
}
compute_tau2_SSS <- function(g, vi, nodes, cpt,
inx.unsplit, xs, gs, vis, a){
# g: the effect size
# vi: the sampling variance
# xk: the moderator
# nodes: the node membership
# pleaf: the parent leaf to be split
# cpt: split point
df <- length(g) - length(unique(nodes)) - 1
QC.unsplit <- compute_left_(g[inx.unsplit], vi[inx.unsplit],
nodes[inx.unsplit], unique(nodes[inx.unsplit]))
q.left <- sum(gs^2/vis*ILeft(cpt, xs, a)) -
(sum(gs/vis*ILeft(cpt, xs, a)))^2/sum(ILeft(cpt, xs, a)/vis)
q.right <- sum(gs^2/vis*IRight(cpt, xs, a)) -
(sum(gs/vis*IRight(cpt, xs, a)))^2/sum(IRight(cpt, xs, a)/vis)
C.left <- sum(ILeft(cpt, xs, a)/vis^2)/sum(ILeft(cpt, xs, a)/vis)
C.right <- sum(IRight(cpt, xs, a)/vis^2)/sum(IRight(cpt, xs, a)/vis)
(q.left + q.right + QC.unsplit[1] - df)/(sum(1/vi) - C.left - C.right - QC.unsplit[2])
}
compute_re_Qb <- function(g, vi, xk, nodes, pleaf, cpt, a){
inx.unsplit <- nodes!= pleaf
inx.split <- nodes == pleaf
xs <- xk[inx.split]
gs <- g[inx.split]
vis <- vi[inx.split]
tau2 <- compute_tau2_SSS(g, vi, nodes, cpt,
inx.unsplit, xs, gs, vis)
wts <- 1/(vi + tau2)
wtss <- wts[inx.split]
Qstar.unsplit <- compute_left_(g[inx.unsplit], 1/wts[inx.unsplit],
nodes[inx.unsplit], unique(nodes[inx.unsplit]))[1]
Qstar.left <- sum(gs^2*wtss*ILeft(cpt, xs, a)) -
(sum(gs*wtss*ILeft(cpt, xs, a)))^2/sum(ILeft(cpt, xs, a)*wtss)
Qstar.right <- sum(gs^2*wtss*IRight(cpt, xs, a)) -
(sum(gs*wtss*IRight(cpt, xs, a)))^2/sum(IRight(cpt, xs, a)*wtss)
Q.between <- sum(g^2*wts) - (sum(g*wts))^2/sum(wts) - Qstar.left - Qstar.right -Qstar.unsplit
c(Q.between,tau2)
}
x <- rnorm(80)
vi <- runif(80, 0.01, 0.04)
g <- x + rnorm(80,0, 0.01)
nodes <- sample(2:4,80,  replace = T)
pleaf <- 3
cpt <- 0
compute_re_Qb(g, vi, x, nodes, pleaf, cpt)
compute_re_Qb(g, vi, x, nodes, pleaf, cpt, a = 50)
compute_re_Qb <- function(g, vi, xk, nodes, pleaf, cpt, a){
inx.unsplit <- nodes!= pleaf
inx.split <- nodes == pleaf
xs <- xk[inx.split]
gs <- g[inx.split]
vis <- vi[inx.split]
tau2 <- compute_tau2_SSS(g, vi, nodes, cpt,
inx.unsplit, xs, gs, vis, a)
wts <- 1/(vi + tau2)
wtss <- wts[inx.split]
Qstar.unsplit <- compute_left_(g[inx.unsplit], 1/wts[inx.unsplit],
nodes[inx.unsplit], unique(nodes[inx.unsplit]))[1]
Qstar.left <- sum(gs^2*wtss*ILeft(cpt, xs, a)) -
(sum(gs*wtss*ILeft(cpt, xs, a)))^2/sum(ILeft(cpt, xs, a)*wtss)
Qstar.right <- sum(gs^2*wtss*IRight(cpt, xs, a)) -
(sum(gs*wtss*IRight(cpt, xs, a)))^2/sum(IRight(cpt, xs, a)*wtss)
Q.between <- sum(g^2*wts) - (sum(g*wts))^2/sum(wts) - Qstar.left - Qstar.right -Qstar.unsplit
c(Q.between,tau2)
}
compute_re_Qb(g, vi, x, nodes, pleaf, cpt, a = 50)
rebetQ<- function(yi, vi, mods){
wts = 1/vi
wy = wts*yi
wy2 = wts * yi^2
Q <- tapply(wy2, mods, sum) - tapply(wy, mods, function(x) (sum(x))^2)/tapply(wts, mods, sum)
df <- tapply(wy, mods, length)-1
C <- tapply(wts, mods, sum) - tapply(wts, mods, function(x) sum(x^2))/ tapply(wts, mods, sum)
tau2 <- (sum(Q) - sum(df))/sum(C)
tau2 <- max(0, tau2)
wstar = 1/(vi+tau2)
wystar = wstar*yi
wy2star = wstar*yi^2
Qstar <- tapply(wy2star, mods, sum) - tapply(wystar, mods, function(x) (sum(x))^2)/tapply(wstar, mods, sum)
Qstar.total <- sum(wy2star) - (sum(wystar))^2/sum(wstar)
Qbet <- Qstar.total - sum(Qstar)
if (is.na(Qbet)) {
Qbet <- Inf
}
return(c(Qbet, tau2))
}
nodes.new <- nodes
nodes.new[nodes == pleaf] <- ifelse(x[nodes == pleaf] < cpt, 5, 6 )
rebetQ(g, vi, nodes.new)
n <- length(xk)
xk <- rnorm(80)
n <- length(xk)
if (is.null(a)) a <- sqrt(n)
a = NULL
if (is.null(a)) a <- sqrt(n)
sigma <- sd(xk); mu <- mean(xk)
xk <- scale(xk)  # IMPORTANT TO STANDARDIZE xk IN ORDER TO APPLY A CONSTANT a
LB <- quantile(xk, probs = alpha.endcut); UB <- quantile(xk, probs =1-alpha.endcut);
alpha.endcut=.02
LB <- quantile(xk, probs = alpha.endcut); UB <- quantile(xk, probs =1-alpha.endcut);
B <- seq(LB, UB, length.out=n.starts)
n.starts = 3
B <- seq(LB, UB, length.out=n.starts)
Q.min <- Inf
for (b in 2:n.starts) {
OPT <- optimize(compute_re_Qb, lower=LB, upper=UB, maximum=FALSE,
g = gi, vi = vi, xk = vi, nodes = nodes,
pleaf = pleaf, a = a)
if (OPT$objective < Q.min) {
Q.min <- OPT$objective
cstar <- OPT$minimum
}
}
OPT <- optimize(compute_re_Qb, lower=LB, upper=UB, maximum=FALSE,
g = g, vi = vi, xk = xk, nodes = nodes,
pleaf = pleaf, a = a)
compute_re_Qb <- function(cpt, g, vi, xk, nodes, pleaf, a){
inx.unsplit <- nodes!= pleaf
inx.split <- nodes == pleaf
xs <- xk[inx.split]
gs <- g[inx.split]
vis <- vi[inx.split]
tau2 <- compute_tau2_SSS(g, vi, nodes, cpt,
inx.unsplit, xs, gs, vis, a)
wts <- 1/(vi + tau2)
wtss <- wts[inx.split]
Qstar.unsplit <- compute_left_(g[inx.unsplit], 1/wts[inx.unsplit],
nodes[inx.unsplit], unique(nodes[inx.unsplit]))[1]
Qstar.left <- sum(gs^2*wtss*ILeft(cpt, xs, a)) -
(sum(gs*wtss*ILeft(cpt, xs, a)))^2/sum(ILeft(cpt, xs, a)*wtss)
Qstar.right <- sum(gs^2*wtss*IRight(cpt, xs, a)) -
(sum(gs*wtss*IRight(cpt, xs, a)))^2/sum(IRight(cpt, xs, a)*wtss)
Q.between <- sum(g^2*wts) - (sum(g*wts))^2/sum(wts) - Qstar.left - Qstar.right -Qstar.unsplit
-Q.between
}
B <- seq(LB, UB, length.out=n.starts)
Q.min <- Inf
for (b in 2:n.starts) {
OPT <- optimize(compute_re_Qb, lower=LB, upper=UB, maximum=FALSE,
g = g, vi = vi, xk = xk, nodes = nodes,
pleaf = pleaf, a = a)
if (OPT$objective < Q.min) {
Q.min <- OPT$objective
cstar <- OPT$minimum
}
}
cstar
Q.min
B <- seq(LB, UB, length.out=n.starts)
Q.min <- Inf
for (b in 2:n.starts) {
OPT <- optimize(compute_re_Qb, lower=LB, upper=UB, maximum=FALSE,
g = g, vi = vi, xk = xk, nodes = nodes,
pleaf = pleaf, a = a)
print(Q.min)
if (OPT$objective < Q.min) {
Q.min <- OPT$objective
cstar <- OPT$minimum
}
}
OPT <- optimize(compute_re_Qb, lower=LB, upper=UB, maximum=FALSE,
g = g, vi = vi, xk = xk, nodes = nodes,
pleaf = pleaf, a = a)
OPT
OPT <- optimize(compute_re_Qb, lower=LB, upper=UB, maximum=FALSE,
g = g, vi = vi, xk = xk, nodes = nodes,
pleaf = pleaf, a = a)
OPT$objective
for (b in 2:n.starts) {
OPT <- optimize(compute_re_Qb, lower=LB, upper=UB, maximum=FALSE,
g = g, vi = vi, xk = xk, nodes = nodes,
pleaf = pleaf, a = a)
print(OPT$objective)
if (OPT$objective < Q.min) {
Q.min <- OPT$objective
cstar <- OPT$minimum
}
}
B <- seq(LB, UB, length.out=n.starts)
Q.min <- Inf
for (b in 2:n.starts) {
OPT <- optimize(compute_re_Qb, lower=B[b-1], upper=B[b], maximum=FALSE,
g = g, vi = vi, xk = xk, nodes = nodes,
pleaf = pleaf, a = a)
print(OPT$objective)
if (OPT$objective < Q.min) {
Q.min <- OPT$objective
cstar <- OPT$minimum
}
}
re_cutoff_SSS <- function(g, vi, xk, nodes, pleaf, a = NULL, minbucket,
alpha.endcut=.02,
multi.start=T, n.starts=3){
n <- length(xk)
# FIX a
if (is.null(a)) a <- sqrt(n)
# FINDING THE SEARCH RANGE TO AVOID ENDCUT PREFERENCE PROBLEM
sigma <- sd(xk); mu <- mean(xk)
xk <- scale(xk)  # IMPORTANT TO STANDARDIZE xk IN ORDER TO APPLY A CONSTANT a
LB <- quantile(xk, probs = alpha.endcut); UB <- quantile(xk, probs =1-alpha.endcut);
if (multi.start==T) {
B <- seq(LB, UB, length.out=n.starts)
Q.min <- Inf
for (b in 2:n.starts) {
OPT <- optimize(compute_re_Qb, lower=B[b-1], upper=B[b], maximum=FALSE,
g = g, vi = vi, xk = xk, nodes = nodes,
pleaf = pleaf, a = a)
print(OPT$objective)
if (OPT$objective < Q.min) {
Q.min <- OPT$objective
cstar <- OPT$minimum
}
}
} else {
cstar <- optimize(obj.func, lower=LB, upper=UB, maximum=F,
a = a, g = g, xk = xk, vi = vi,  cnode = cnode, pl = pl)$minimum
}
cstar <- cstar*sigma + mu # TRANSFORM BACK
return(cstar)
}
re_cutoff_SSS(g, vi, xk, nodes, pleaf, a, 3)
re_cutoff_SSS <- function(g, vi, xk, nodes, pleaf, a = NULL, minbucket,
alpha.endcut=.02,
multi.start=T, n.starts=5){
n <- length(xk)
# FIX a
if (is.null(a)) a <- sqrt(n)
# FINDING THE SEARCH RANGE TO AVOID ENDCUT PREFERENCE PROBLEM
sigma <- sd(xk); mu <- mean(xk)
xk <- scale(xk)  # IMPORTANT TO STANDARDIZE xk IN ORDER TO APPLY A CONSTANT a
LB <- quantile(xk, probs = alpha.endcut); UB <- quantile(xk, probs =1-alpha.endcut);
if (multi.start==T) {
B <- seq(LB, UB, length.out=n.starts)
Q.min <- Inf
for (b in 2:n.starts) {
OPT <- optimize(compute_re_Qb, lower=B[b-1], upper=B[b], maximum=FALSE,
g = g, vi = vi, xk = xk, nodes = nodes,
pleaf = pleaf, a = a)
if (OPT$objective < Q.min) {
Q.min <- OPT$objective
cstar <- OPT$minimum
}
}
} else {
cstar <- optimize(obj.func, lower=LB, upper=UB, maximum=F,
a = a, g = g, xk = xk, vi = vi,  cnode = cnode, pl = pl)$minimum
}
cstar <- cstar*sigma + mu # TRANSFORM BACK
return(cstar)
}
re_cutoff_SSS(g, vi, xk, nodes, pleaf, a, 3)
re_cutoff_SSS <- function(g, vi, xk, nodes, pleaf, a = NULL, minbucket,
alpha.endcut=.02,
multi.start=T, n.starts=3){
n <- length(xk)
# FIX a
if (is.null(a)) a <- sqrt(n)
# FINDING THE SEARCH RANGE TO AVOID ENDCUT PREFERENCE PROBLEM
sigma <- sd(xk); mu <- mean(xk)
xk <- scale(xk)  # IMPORTANT TO STANDARDIZE xk IN ORDER TO APPLY A CONSTANT a
LB <- quantile(xk, probs = alpha.endcut); UB <- quantile(xk, probs =1-alpha.endcut);
if (multi.start==T) {
B <- seq(LB, UB, length.out=n.starts)
Q.min <- Inf
for (b in 2:n.starts) {
OPT <- optimize(compute_re_Qb, lower=B[b-1], upper=B[b], maximum=FALSE,
g = g, vi = vi, xk = xk, nodes = nodes,
pleaf = pleaf, a = a)
if (OPT$objective < Q.min) {
Q.min <- OPT$objective
cstar <- OPT$minimum
}
}
} else {
cstar <- optimize(obj.func, lower=LB, upper=UB, maximum=F,
a = a, g = g, xk = xk, vi = vi,  cnode = cnode, pl = pl)$minimum
}
cstar <- cstar*sigma + mu # TRANSFORM BACK
return(cstar)
}
re_cutoff_SSS(g, vi, xk, nodes, pleaf, a, 3)
?quantile
library(metacartv2)
library("metacartv2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:metacartv2", unload=TRUE)
remove.packages("metacartv2")
library(metacartv2)
library(metacartv2)
remove.packages("metacartv2")
library(metacartv2)
library(metacartv2)
remove.packages("metacartv2")
library(metacartv2)
library(metacartv2)
library(metacartv2)
library(metafor)
data("dat.bourassa1996")
dat.handedness <- escalc(measure="OR", subset = (sex == "combined"),
ai=lh.le, bi=lh.re, ci=rh.le, di=rh.re, data = dat.bourassa1996,
add = 1/2, to = "all")
class(dat.handedness) <- "data.frame"
sapply(dat.handedness[5:8], table)
regHAND.re <- rma(yi = yi, vi = vi, method = "DL",
mods = ~ eye_assess + investigator + hand_assess +
selection, data = dat.handedness)
modHAND.re <- metacartv2::REmrt(yi ~ eye_assess + investigator + hand_assess+ selection
, data = dat.handedness ,  vi = vi, c = 0.5, maxL = 10L,
minsplit = 10L, cp = 1e-04,
minbucket = 3, xval = 10, lookahead = FALSE)
library(metacartv2)
modHAND.re <- metacartv2::REmrt(yi ~ eye_assess + investigator + hand_assess+ selection
, data = dat.handedness ,  vi = vi, c = 0.5, maxL = 10L,
minsplit = 10L, cp = 1e-04,
minbucket = 3, xval = 10, lookahead = FALSE)
summary(modHAND.re)
plot(modHAND.re)
modBCT.fe <- FEmrt(g~T1 + T2 + T4 + T25, data = dat.BCT2009, vi = vi, c = 0.5,
control = rpart.control(xval = 10, minbucket = 5, minsplit = 10,
cp = 1e-04))
summary(modBCT.fe)
plot(modBCT.fe)
newStudy <- data.frame(T1 = factor(1, levels = 0:1),
T2 = factor(1, levels = 0:1),
T4 = factor(0, levels = 0:1),
T25 = factor(1, levels = 0:1)
)
predict(modBCT.fe, newStudy)
modBCT.re <- REmrt(g~T1 + T2 + T4 + T25, data = dat.BCT2009, vi = vi, c = 0.5,
maxL = 10L, minsplit = 10L, cp = 1e-04,
minbucket = 3, xval = 10, lookahead = FALSE)
summary(modBCT.re)
res <-metacartv2::REmrt(g ~ x1 + x2 + x3 + x4, vi = vi, data = dat.balanced,
c = 1, maxL = 5L, minsplit = 6L, cp = 1e-04,
minbucket = 3L, xval = 10, lookahead = FALSE)
res$initial.tree
metacartv2::REmrt_GS_cpp2(res$data, maxL = 5L, minsplit = 6L, minbucket = 3L,delQ = 0,lookahead = FALSE)$tree
res2 <- metacartv2::REmrt(g ~ x1 + x2 + x3 + x4, vi = vi, data = dat.balanced,
c = 1, maxL = 5L, minsplit = 6L, cp = 1e-04,
minbucket = 3L, xval = 10, lookahead = T)
summary(res2)
res2$initial.tree
plot(res2)
library(metacartv2)
library(metacart)
remove.packages("metacart")
remove.packages("metacartv2")
library(metacart)
library(metacart)
detach("package:metacart", unload=TRUE)
remove.packages("metacart")
library(metacart)
library(metacart)
0.5^13
0.67^13
0.9^13
(5/6)^13
load("/Users/xinruli/Documents/Meta-CART\ Projects/Meta-CART\ R-Package/The\ Package\ v1/metacartv0.1/data/SimData.rda")
devtools::use_data(SimData)
library(metacart)
library(metacart)
devtools::build_vignettes()
devtools::use_vignette("my-vignette")
clean_vignettes()
devtools::clean_vignettes()
library(metacart)
library(metacart)
library(metacart)
8*12/10
install.packages(c("foreign", "lattice", "MASS", "Matrix", "mgcv", "survival"))
install.packages("roxygen2")
install.packages("Rcpp")
install.packages("ggplot2")
install.packages("gridExtra")
install.packages("knitr")
install.packages("rmarkdown")
library(metacart)
metacart:::.compute_re_Q_()
metacart:::.compute_re_Q_()
data(dat.BCT2009)
REtree <- REmrt(g ~ T1 + T2+ T4 +T25, vi = vi, data = dat.BCT2009, c = 0)
install.packages("devtools")
devtools::check()
?check
install.packages("metafor")
devtools::check(document=FALSE)
devtools::check()
devtools::check(document=FALSE)
devtools::check(document=FALSE)
library(metacart)
devtools::check(document=FALSE)
library(metacart)
library(metacart)
library(metacart)
library(devtools)
library(devtool)
install.packages("devtools")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
install.packages("processx")
library(devtools)
install.packages("processx")
install.packages("~/Downloads/processx_3.3.0.tar", repos = NULL)
install.packages("~/Downloads/processx_3.3.0.tar", repos = "source")
install.packages("~/Downloads/processx_3.3.0.tar", repos = NULL)
?install.packages
install.packages("~/Downloads/processx_3.3.0.tar", repos = NULL, type = "source")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
devtools::check()
install.packages("ggplot2")
install.packages("gridExtra")
devtools::check()
install.packages("rcmdcheck")
devtools::check()
library(Rcpp)
install.packages("Rcpp")
devtools::check()
?sample
devtools::check()
